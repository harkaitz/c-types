.\" Automatically generated by Pandoc 2.1.1
.\"
.TH "mconfig" "3" "" "" ""
.hy
.SH NAME
.PP
MCONFIG_INITIALIZER(),mconfig_cleanup(),mconfig_load(),mconfig_get(),
mconfig_set(),mconfig_printf(),mconfig_require()
.SH SYNOPSIS
.nf
\f[C]
#include\ <io/mconfig.h>

mconfig_t\ MCONFIG_INITIALIZER(void);

void\ mconfig_cleanup\ (mconfig_t\ *_m);
bool\ mconfig_add\ \ \ \ \ (mconfig_t\ *_m,\ ...);
bool\ mconfig_load\ \ \ \ (mconfig_t\ *_m,\ const\ char\ _filename[],\ bool\ _success_if_not_found);
cstr\ mconfig_get\ \ \ \ \ (mconfig_t\ *_m,\ const\ char\ _var[],\ const\ char\ _def[]);
int\ \ mconfig_printf\ \ (mconfig_t\ *_m,\ FILE\ *_f,\ const\ char\ _cfg[],\ ...);
\f[]
.fi
.SH DESCRIPTION
.PP
This functions help reading a configuration file with lines formated the
following way.
.IP
.nf
\f[C]
VARIABLE_NAME\ \ \ \ \ VALUE
#\ COMMENT
\f[]
.fi
.PP
You can initialize the mconfig_t structure by zeroing it.
After the program finishes you can call \f[I]mconfig_cleanup()\f[].
.PP
Load a file with \f[I]mconfig_load()\f[].
If a configuration was set previously then \f[I]mconfig_load()\f[] will
ignore it.
This means you should call it the following order.
.IP
.nf
\f[C]
mconfig_load(&m,\ "/etc/my\-program.cfg",\ true);
\f[]
.fi
.PP
You can get a configuration variable with \f[I]mconfig_get()\f[] and
change/set one with \f[I]mconfig_set()\f[].
When changing the old value will be kept, so do not set ovewrite values
many times, that would be a leak.
.PP
You can write a configuration file with \f[I]mconfig_printf()\f[].
.SH RETURN VALUE
.PP
True on success, false on error.
.SH COLLABORATING
.PP
For making bug reports, feature requests and donations visit one of the
following links:
.IP "1." 3
<gemini://harkadev.com/oss/>
.IP "2." 3
<https://harkadev.com/oss/>
