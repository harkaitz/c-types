.\" Automatically generated by Pandoc 2.1.1
.\"
.TH "crest" "3" "" "" ""
.hy
.SH NAME
.PP
crest_destroy(), crest_create(), crest_set_auth(), crest_start_url_v(),
crest_start_url(), crest_post_data(), crest_perform(), crest_get_json()
.SH SYNOPSIS
.nf
\f[C]
#include\ <curl/crest.h>

typedef\ struct\ crest\ crest;
typedef\ struct\ crest_result\ {
\ \ \ \ const\ char\ *ctype;
\ \ \ \ long\ \ \ \ \ \ \ \ rcode;
\ \ \ \ char\ \ \ \ \ \ \ *d;
\ \ \ \ size_t\ \ \ \ \ \ dsz;
}\ crest_result;

bool\ crest_create\ \ (crest\ **_o);
void\ crest_destroy\ (crest\ *_r);

bool\ crest_set_auth\ (crest\ *_o,\ const\ char\ _user[],\ const\ char\ _pass[]);

bool\ crest_start_url_v\ (crest\ *_r,\ const\ char\ _fmt[],\ va_list\ _va);
bool\ crest_start_url\ \ \ (crest\ *_r,\ const\ char\ _fmt[],\ ...);

bool\ crest_post_data\ (crest\ *_r,\ const\ char\ _ctype[],\ FILE\ **_o_wfp);

bool\ crest_perform\ \ (crest\ \ \ *_r,\ const\ char\ **_ctype\ \ ,\ long\ *_rcode,\ char\ **_d,\ \ \ size_t\ *_dsz);
bool\ crest_get_json\ (json_t\ **_o,\ const\ char\ \ \ _ctype[],\ long\ \ _rcode,\ char\ \ \ _d[],\ size_t\ \ _dsz);
\f[]
.fi
.SH DESCRIPTION
.PP
This functions help developing REST clients using CURL.
You can create/destroy a \f[I]crest structure\f[] with
\f[I]crest_create/crest_destroy\f[].
.PP
After creating you can configure shared options between requests with
\f[I]crest_set_auth\f[].
.PP
Start a request specifying the URL with \f[I]crest_start_url\f[].
In order to include content to the request use \f[I]crest_post_data\f[].
.PP
Finally perform a request with \f[I]crest_perform\f[].
If the response is a JSON you can parse it with \f[I]crest_get_json\f[]
(will use jansson).
.SH RETURN VALUE
.PP
Return \f[I]true\f[] on success \f[I]false\f[] in error.
.SH COLLABORATING
.PP
For making bug reports, feature requests and donations visit one of the
following links:
.IP "1." 3
<gemini://harkadev.com/oss/>
.IP "2." 3
<https://harkadev.com/oss/>
.SH SEE ALSO
.PP
\f[B]OPEN_MEMSTREAM(3)\f[], \f[B]JANSSON(3)\f[], \f[B]CURL(3)\f[]
